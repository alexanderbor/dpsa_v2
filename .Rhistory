ssquare <- as.numeric(t(e)%*%e / (nrow(dm2) - ncol(dm2) - 1))
covarm <- ssquare * solve(t(dm2)%*%dm2)
sqrt(diag(covarm))
summary(m2)
pt
?pt
pt(1:5, df = 10)
pt(2, df = 1000)
?pz
pt(1.96, df = 1000)
qt(.95, df = 10000)
qt(.975, df = 10000)
t0 <- beta / sterrors
sterrors <- sqrt(diag(covarm)) #get std errors from squareroots of diagonal entries
t0 <- beta / sterrors
sterrors
t0 <- beta3 / sterrors
t0
p95 <- pt(t0, df = (nrow(dm2) - ncol(dm2) - 1))
p95
summary(m2)
p95 <- 1 - pt(t0, df = (nrow(dm2) - ncol(dm2) - 1))
p95
summary(m2)
p1 <- 1 - pt(t0, df = (nrow(dm2) - ncol(dm2) - 1))
p2 <- 1 - pt(t0, df = (nrow(dm2) - ncol(dm2) - 1))
p2 <- 1 - (pt(t0, df = (nrow(dm2) - ncol(dm2) - 1)) * 2)
p2
p2 <- (1 - pt(t0, df = (nrow(dm2) - ncol(dm2) - 1)) * 2)
p2
p1
p2 <- (1 - pt(t0, df = (nrow(dm2) - ncol(dm2) - 1))) * 2
p2
summary(m2)
1.986974e+00
p1 <- 1 - pt(abs(t0), df = (nrow(dm2) - ncol(dm2) - 1))
p1
1.295809e-07
1.29e-07
1.2e-07
1e-07
1e-06
t0
p1 <- pt(abs(t0), df = (nrow(dm2) - ncol(dm2) - 1))
p1
summary(m2)
p1 <- 1 - (pt(abs(t0), df = (nrow(dm2) - ncol(dm2) - 1)))
p1
p2 <- (1 - (pt(abs(t0), df = (nrow(dm2) - ncol(dm2) - 1)))) * 2
p2
summary(m2)
p2 <- (1 - (pt(abs(t0), df = (nrow(dm2) - 1)))) * 2
p2
nrow(dm2) - 1)
nrow(dm2) - 1
nrow(dm2) - ncol(dm2) - 1
summary(m2)
sterrors
str(m2)
names(summary(m2))
names(m2)
summary(m2)$coefficients[, 4]
p2 - summary(m2)$coefficients[, 4]
9.871618e-01
e-01
1e-1
#T-statistics
summary(m2)
summary(m2)$coefficients[, 4]
round(p2 - summary(m2)$coefficients[, 4])
round(p2 - summary(m2)$coefficients[, 4], 2)
p1 <- 1 - (pt(t0, df = (nrow(dm2) - ncol(dm2) - 1)))
p1
t0
p1 <- 1 - (pt(abs(t0), df = (nrow(dm2) - ncol(dm2) - 1)))
pt(abs(t0), df = (nrow(dm2) - ncol(dm2) - 1))
p2 <- (1 - (pt(abs(t0), df = (nrow(dm2)- ncol(dm2) - 1)))) / 2
p2
round(p2 - summary(m2)$coefficients[, 4], 2)
p2 <- (1 - (pt(abs(t0), df = (nrow(dm2)- ncol(dm2) - 1))))
p1 <- (pt(abs(t0), df = (nrow(dm2) - ncol(dm2) - 1), lower.tail = F))
p1
p2 <- (pt(abs(t0), df = (nrow(dm2) - ncol(dm2) - 1), lower.tail = F))* 2
round(p2 - summary(m2)$coefficients[, 4], 2)
summary(m2)$coefficients[, 4]
p2
1.272636e-02 - 1.302643e-02
3.963044e-01  - 3.978780e-01
p2 - summary(m2)$coefficients[, 4]
9.254684e-01 - 9.252203e-01
l
lm
mm <- function (A,B){
m <- nrow (A)
n <- ncol (B)
C <- matrix (NA , nrow =m, ncol =n)
for(i in 1:m) {
for(j in 1:n) {
C[i,j] <- paste ('(',A[i,],'*',B[,j],')', sep='', collapse = '+')
}
}
print (C, quote = FALSE )
}
A <- matrix (1:6 , nrow = 3)
B <- matrix (2:5 , nrow = 2)
mm(A,B)
#Read Data
library(rio)
data <- rio::import("http://www.qogdata.pol.gu.se/data/qog_bas_cs_jan15.csv")
#Task 1 - R matrix of model m1
# f1 <- une_leb ~ I(gle_cgdpc/1e4) + I(ross_oil_netexpc/1e3)
# m1 <- lm(f1, data = d)
d1 <- data[c("gle_cgdpc", "ross_oil_netexpc")] #subset data for relevant variables
d1 <- d1[complete.cases(d1),] #exclude missing cases
dim(d1) #check N
dm <- matrix(c(rep(1,167), d1$gle_cgdpc / 1e4, d1$ross_oil_netexpc / 1e3), ncol = 2) #design matrix
#QR decomposition and extraction of R matrix
dim(dm)
dm
qrm
qrm <- qr(dm)
r <- qr.R(qrm)
qrm
r
qr
method.qe
method.qr
sum
lm
mean
methods
method
?methods
methods(class = "qr")
solve.qr
qr.coef
x <- c(1, 10000 / 1e4, 1, 1, 1000 /1e3, rep(0,9))
x <- c(1, 10000 / 1e4, 1, 1, 1000 /1e3, rep(0,9))yhat <- sum(x * beta3)
dm2
d2 <- data[c("une_leb", "gle_cgdpc", "chga_demo", "ross_oil_netexpc", "ht_colonial")] #subset data for relevant variables
d2 <- d2[complete.cases(d2),] #exclude missing cases
dim(d2) #check N
y <- d2[, "une_leb"] #create y vector
#create design matrix
dm2 <- matrix(c(rep(1, 165),
d2$gle_cgdpc / 1e4, d2$chga_demo,
d2$gle_cgdpc / 1e4 * d2$chga_demo,
d2$ross_oil_netexpc / 1e3,
model.matrix( ~ 0 + factor(ht_colonial), data = d2)[, 2:10]),
nrow = 165,
dimnames = list(1:165, c("intercept", "gle_cgdpc", "chga_demo", "gle*chga", "ross_oil",
"colonial1", "colonial2", "colonial3", "colonial4",
"colonial5", "colonial6", "colonial7", "colonial8",
"colonial10")
)
)
dm2
x41 <- x42 <- x43 <- x44 <- dm2
identical(x41, x42)
dim(dm2)
x41[, 2] <- rep(1, 165)
x41
x41[, c(2, 4)] <- rep(1, 165)
x41
x41 <- x42 <- x43 <- x44 <- dm2
head(dm2)
x44 <- x44[, c(1:5)]
x41 <- x42 <- x43 <- x44 <- dm2
x41[, 2] <- rep(1, 165)
x41[, 4] <- x41[, 2]*x41[,3]
x42[, 3] <- rep(1, 165)
x42[, 4] <- x42[, 2]*x42[,3]
x43[, 5] <- rep(1, 165)
x44 <- x44[, c(1:5)]
y.hat <- function(x, beta){
y <- numeric(nrow(x))
for(i in 1:nrow(x)){
y[i] <- sum(x[i,] * beta)
}
return(y)
}
y.hat(x41, beta3)
beta3 <- solve(t(dm2) %*% dm2) %*% t(dm2) %*% y
y.hat(x41, beta3)
y.hat(x44, beta3)
dim(dm2)
x44[, c(6:14)] <- rep(0, 165)
c(6:14)
c(6,7,8,9,10)
x41 <- x42 <- x43 <- x44 <- dm2
x41[, 2] <- rep(1, 165)
x41[, 4] <- x41[, 2]*x41[,3]
x42[, 3] <- rep(1, 165)
x42[, 4] <- x42[, 2]*x42[,3]
x43[, 5] <- rep(1, 165)
x44[, c(6,7,8,9)] <- rep(0, 165)
x44[, c(6:14)] <- rep(0, 165)
head(x44)
y.hat(x44)
y.hat(x44, beta3)
d1 <- data[c("gle_cgdpc", "ross_oil_netexpc")] #subset data for relevant variables
d1 <- d1[complete.cases(d1),] #exclude missing cases
dim(d1) #check N
dm <- matrix(c(rep(1,167), d1$gle_cgdpc / 1e4, d1$ross_oil_netexpc / 1e3), ncol = 2) #design matrix
#QR decomposition and extraction of R matrix
qrm <- qr(dm)
r <- qr.R(qrm)
r
dm
dm <- matrix(c(rep(1,167), d1$gle_cgdpc / 1e4, d1$ross_oil_netexpc / 1e3), ncol = 3) #design matrix
#QR decomposition and extraction of R matrix
qrm <- qr(dm)
r <- qr.R(qrm)
r
??Det
??det
r
inv3b3 <- function(x){
q<- 1/det(x)
y[1,1] <- (x[2,2]*x[3,3] - x[2,3]*x[3,2])
y[1,2] <- -(x[1,2]*x[3,3] - x[1,3]*x[3,2])
y[1,3] <- (x[1,2]*x[2,3] - x[1,2]*x[2,2])
y[2,1] <- -(x[2,1]*x[3,3] - x[2,3]*x[3,1])
y[2,2] <- (x[1,1]*x[3,3] - x[1,3]*x[3,1])
y[2,3] <- -(x[1,1]*x[2,3] - x[3,1]*x[2,1])
y[3,1] <- (x[2,1]*x[3,2] - x[2,2]*x[3,1])
y[3,2] <- -(x[1,1]*x[3,2] - x[1,2]*x[3,2])
y[3,3] <- (x[1,1]*x[2,2] - x[1,2]*x[2,1])
}
inv3b3(r)
y <- matrix(0, 3, 3)
y
inv3b3 <- function(x){
q <- numeric(1)
y <- matrix(0, 3, 3)
q<- 1/det(x)
y[1,1] <- (x[2,2]*x[3,3] - x[2,3]*x[3,2])
y[1,2] <- -(x[1,2]*x[3,3] - x[1,3]*x[3,2])
y[1,3] <- (x[1,2]*x[2,3] - x[1,2]*x[2,2])
y[2,1] <- -(x[2,1]*x[3,3] - x[2,3]*x[3,1])
y[2,2] <- (x[1,1]*x[3,3] - x[1,3]*x[3,1])
y[2,3] <- -(x[1,1]*x[2,3] - x[3,1]*x[2,1])
y[3,1] <- (x[2,1]*x[3,2] - x[2,2]*x[3,1])
y[3,2] <- -(x[1,1]*x[3,2] - x[1,2]*x[3,2])
y[3,3] <- (x[1,1]*x[2,2] - x[1,2]*x[2,1])
q*y
}
inv3b3(r)
solve(r)
identical(inv3b3(r), solve(r))
inv3b3(r) - solve(r)
?backsolve
e
exp(1)
?optim
?ry
?try
?optim
4253+1600+800+875+134.28+2090
4253+940+875
4253+875+940
343+78
78/421
2+2
a <- 1:20
a
a[1:3,]
a[1:3]
b <- seq(4, 24)
b
c <- cbind(a,c)
c <- cbind(a,b)
a
b
c
c[10:12,]
d <- c[10:12,]
d
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
p
temp$x * temp$Prob
temp[1,] * temp[2,]
mean(temp[1,] * temp[2,])
sum(temp[1,] * temp[2,])
75/52
(75/52) * 30
(0.75*0.3) / ((0.75*0.3) + ((1-0.52)*(1-0.3)))
library(ggplot2)
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
nosim <- 10000
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
nosim), 1, mean),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
dat
nosim <- 10
sample(1 : 6, nosim, replace = TRUE)
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean)
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 2, mean)
pply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 4, mean)
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 4, mean)
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean)
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean)
matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim)
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim)
?apply
factor(rep(1 : 4, rep(nosim, 4))
)
rep(nosim, 4)
rep(c(1,1),c(5,5))
rep(c(1,2),c(5,5))
?data.frame
data.frame(matrix(sample(1:6), 10, replace = T), 5)
data.frame(matrix(sample(1:6, 10, replace = T), 5))
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
dat
nosim
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean)
sample(1 : 6, nosim, replace = TRUE)
matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim)
matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim)
matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim)
size = factor(rep(1 : 4, rep(nosim, 4))
)
nosim <- 10000
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g + facet_grid(. ~ size)
nosim <- 10
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
dat
install.packages("rmarkdown")
install.packages(c("abind", "arm", "BRugs", "caret", "chron", "colorspace", "curl", "devtools", "dplyr", "e1071", "effects", "formatR", "gdata", "geosphere", "ggmap", "ggplot2", "gplots", "gtools", "highr", "httr", "igraph", "jsonlite", "lme4", "manipulate", "mapproj", "maps", "markdown", "MASS", "mime", "mnormt", "NLP", "openxlsx", "plyr", "psych", "quantreg", "R6", "Rcpp", "RcppEigen", "RCurl", "roxygen2", "rstudioapi", "sandwich", "scales", "sem", "sjPlot", "sp", "SparseM", "stargazer", "stringi", "stringr", "tidyr", "tm", "XML", "zoo"))
nosim <- 1000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1 / sqrt(n)
qnorm(.95)
pnorm(1160, 1020, 50)
pnorm(1160, 1020, 50, lower.tail = FALSE)
qnorm(0.75, 1020, 50, lower.tail = F)
?pnorm
qnorm(986, 1020, 50, lower.tail = F)
pnorm(0.002, 1020, 50, lower.tail = FALSE)
qnorm(0.75, 1020, 50, lower.tail = T)
qnorm(0.975)
pbinom()
?pbinom
#Main effect of Tech vs Contr on Impact, Fairness and Crisis.
#Interaction?
20^4
file.exists("~/.ssh/id_rsa.pub")
table(sample(1:99999, 300, replace = T))
table(sample(1:99999, 300, replace = T))
table(sample(1:99999, 300, replace = T))
table(sample(1:99999, 300, replace = T))
rawqual <- read.csv("C:/Users/Bor/Dropbox/Anna_Article/crowdflower/Qual_resp_since1021.1300.csv", header = T, na.strings = "")
qual <- rawqual[, c(6, 11, 12, 116:133)]
str(qual)
rawcf <- read.csv("C:/Users/Bor/Dropbox/Anna_Article/crowdflower/CF_fullreport_1028.csv", header = T)
cf <- rawcf[, c(8, 12, 14)]
names(cf) <- c("CF_ID", "X_ip", "CFCode" )
str(cf)
data <- merge(qual, cf)
str(data)
nrow(data)
head(c(data$X_ip, data$IPAddress))
head(data)
table(data$X_ip)
sort(table(data$X_ip))
which(data$X_ip == "23.27.220.19")
str(data)
names(data)
data$att <- ifelse(rowSums(data[, 4:21], na.rm = T) == 1,
ifelse(data$Q46_10 == 1, 1, 0),
0)
bonus <- data[data$att == 1  & !is.na(data$att), ]
sort(table(data$X_ip))
sort(table(bonus$X_ip))
str(bonus)
str(data)
66/134
bonus$CF_ID
CF_bonus <- function(workers, cents){
for(i in 1:length(workers)){
curl <- paste0("curl -X POST --data-urlencode \"amount=",cents, "\" https://api.crowdflower.com/v1/jobs/788906/workers/", workers[i], "/bonus.json?key=m4o7A2A2gcpmSBz75Zfy")
system(curl)
}
}
bonus
CF_bonus(bonus$CF_ID, 28)
warnings()
write.table(bonus, "C:/Users/Bor/Dropbox/Anna_Article/crowdflower/bonus.csv")
bonus <- read.table("C:/Users/Bor/Dropbox/Anna_Article/crowdflower/bonus.csv")
bonus
mplot <- function(y, x, f, t = "Treatment Groups", xlab){
library(ggplot2)
fit1 <- lm(y ~ x*f)
fit1_d <- data.frame(expand.grid(x = levels(x),
f = min(f, na.rm = T):max(f, na.rm = T)))
fit1_d <- cbind(fit1_d, predict(fit1, fit1_d, interval = "confidence"))
ggplot(fit1_d, aes(x = f, y = fit)) +
geom_ribbon(aes(ymin = lwr, ymax = upr, fill = x), alpha = 0.2) +
geom_line(aes(colour = x)) +
scale_colour_discrete(name = t) +
scale_fill_discrete(name = t) +
ylab("Predicted Value") +
xlab(xlab) +
theme_bw(base_size = 28)
}
data <- read.csv("C:/Users/Bor/Dropbox/Anna_Article/exp2_data.csv")
#subset to people not in pilot phase
data <- subset(data, data$pilot == 0 & data$team > 1)
#data$t1 is variable for treatment 1. 0 = dem. 1 = exp.
data$t1 <- ifelse(data$randomnr >= 3, 1, 0)
data$t1f <- as.factor(ifelse(data$randomnr >= 3, 1, 0))
data$t1f <- factor(data$t1f, labels=c("Democratic", "Expert"))
#data$t2 is variable for treatment 2. 0 = collectivist, 1 = individualist)
data$t2<-as.factor(ifelse(data$randomnr == 1, 1, ifelse(data$randomnr == 3, 1, 0)))
data$t2f <- factor(data$t2, labels = c("Collectivist", "Individualist"))
#Visualize the effect of the Dem/Exp treatments
mplot(y = data$fair2, x= data$t1f, f=data$sd4, xlab = "Stealth Democracy\nIndep. Experts")
library(slidify)
author(dpsa_v2)
author("dpsa_v2")
getwd()
setwd("C:/Users/Bor/Dropbox/Anna_Article")
author(dpsa_v2)
author("dpsa_v2")
